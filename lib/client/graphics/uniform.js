// Generated by LiveScript 1.4.0
(function(){
  var ref$, Matrix, Vector, Uniform, toString$ = {}.toString;
  ref$ = require('sylvester'), Matrix = ref$.Matrix, Vector = ref$.Vector;
  module.exports = Uniform = (function(){
    Uniform.displayName = 'Uniform';
    var prototype = Uniform.prototype, constructor = Uniform;
    function Uniform(program, name){
      var gl;
      this.program = program;
      this.name = name;
      gl = this.program.graphics.gl;
      this.program.uniforms[this.name] = this;
      this.handle = gl.getUniformLocation(this.program.handle, this.name);
      this.value = null;
    }
    prototype.setf = function(value){
      var gl, func;
      this.value = value;
      gl = this.program.graphics.gl;
      if (this.value instanceof Matrix) {
        func = (function(){
          switch (this.value.elements.length) {
          case 1:
            return bind$(gl, 'uniformMatrix1fv');
          case 2:
            return bind$(gl, 'uniformMatrix2fv');
          case 3:
            return bind$(gl, 'uniformMatrix3fv');
          case 4:
            return bind$(gl, 'uniformMatrix4fv');
          default:
            throw new Error("Invalid matrix");
          }
        }.call(this));
        func(this.handle, false, new Float32Array(this.value.flatten()));
        return;
      }
      if (arguments.length > 1) {
        this.value = arguments;
      }
      if (this.value instanceof Vector) {
        this.value = this.value.elements;
      }
      if (toString$.call(this.value).slice(8, -1) === "Number") {
        this.value = [this.value];
      }
      func = (function(){
        switch (this.value.length) {
        case 1:
          return bind$(gl, 'uniform1fv');
        case 2:
          return bind$(gl, 'uniform2fv');
        case 3:
          return bind$(gl, 'uniform3fv');
        case 4:
          return bind$(gl, 'uniform4fv');
        default:
          throw new Error("Invalid number of elements");
        }
      }.call(this));
      return func(this.handle, new Float32Array(this.value));
    };
    prototype.seti = function(value){
      var gl, func;
      this.value = value;
      gl = this.program.graphics.gl;
      if (arguments.length > 1) {
        this.value = arguments;
      }
      if (this.value instanceof Vector) {
        this.value = this.value.elements;
      }
      if (toString$.call(this.value).slice(8, -1) === "Number") {
        this.value = [this.value];
      }
      func = (function(){
        switch (this.value.length) {
        case 1:
          return bind$(gl, 'uniform1iv');
        case 2:
          return bind$(gl, 'uniform2iv');
        case 3:
          return bind$(gl, 'uniform3iv');
        case 4:
          return bind$(gl, 'uniform4iv');
        default:
          throw new Error("Invalid number of elements");
        }
      }.call(this));
      return func(this.handle, new Float32Array(this.value));
    };
    return Uniform;
  }());
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
