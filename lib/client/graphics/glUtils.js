// Generated by LiveScript 1.4.0
(function(){
  var ref$, Matrix, Vector, makeLookAt, makePerspective, makeFrustum, makeOrtho, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('sylvester'), Matrix = ref$.Matrix, Vector = ref$.Vector;
  Matrix.Translation = function(v){
    if (arguments.length > 1) {
      v = arguments;
    }
    if (v instanceof Vector) {
      v = v.elements;
    }
    return $M([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [v[0], v[1], v[2], 1]]);
  };
  Matrix.Scale = function(v){
    if (arguments.length > 1) {
      v = arguments;
    }
    if (v instanceof Vector) {
      v = v.elements;
    }
    return $M([[v[0], 0, 0, 0], [0, v[1], 0, 0], [0, 0, v[2], 0], [0, 0, 0, 1]]);
  };
  Matrix.prototype.flatten = function(){
    var ref$;
    return (ref$ = []).concat.apply(ref$, this.elements);
  };
  out$.makeLookAt = makeLookAt = function(eye, center, up){
    var z, x, y, m, t;
    z = eye.subtract(center).toUnitVector();
    x = up.cross(z).toUnitVector();
    y = z.cross(x).toUnitVector();
    m = $M([[x.e(1), x.e(2), x.e(3), 0], [y.e(1), y.e(2), y.e(3), 0], [z.e(1), z.e(2), z.e(3), 0], [0, 0, 0, 1]]);
    t = $M([[1, 0, 0 - eye.elements[0]], [0, 1, 0 - eye.elements[1]], [0, 0, 1 - eye.elements[2]], [0, 0, 0, 1]]);
    return m.x(t);
  };
  out$.makePerspective = makePerspective = function(fovy, aspect, znear, zfar){
    var ymax, ymin, xmin, xmax;
    ymax = znear * Math.tan(fovy * Math.PI / 360.0);
    ymin = -ymax;
    xmin = ymin * aspect;
    xmax = ymax * aspect;
    return makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
  };
  out$.makeFrustum = makeFrustum = function(left, right, bottom, top, znear, zfar){
    var X, Y, A, B, C, D;
    X = 2 * znear / (right - left);
    Y = 2 * znear / (top - bottom);
    A = (right + left) / (right - left);
    B = (top + bottom) / (top - bottom);
    C = -(zfar + znear) / (zfar - znear);
    D = -2 * zfar * znear / (zfar - znear);
    return $M([[X, 0, A, 0], [0, Y, B, 0], [0, 0, C, D], [0, 0, -1, 0]]);
  };
  out$.makeOrtho = makeOrtho = function(left, right, bottom, top, znear, zfar){
    var tx, ty, tz;
    tx = -(right + left) / (right - left);
    ty = -(top + bottom) / (top - bottom);
    tz = -(zfar + znear) / (zfar - znear);
    return $M([[2 / (right - left), 0, 0, 0], [0, 2 / (top - bottom), 0, 0], [0, 0, -2 / (zfar - znear), 0], [tx, ty, tz, 1]]);
  };
}).call(this);
