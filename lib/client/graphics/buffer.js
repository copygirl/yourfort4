// Generated by LiveScript 1.4.0
(function(){
  var Buffer, toString$ = {}.toString;
  module.exports = Buffer = (function(){
    Buffer.displayName = 'Buffer';
    var prototype = Buffer.prototype, constructor = Buffer;
    function Buffer(graphics, type, data, hint, pointerSize, pointerType){
      var gl;
      this.graphics = graphics;
      this.type = type;
      gl = this.graphics.gl;
      if (this.type.length != null) {
        pointerType = pointerSize;
        pointerSize = hint;
        hint = data;
        data = this.type;
        this.type = gl.ARRAY_BUFFER;
      }
      this.handle = gl.createBuffer();
      if (data != null) {
        this.data(data, hint, pointerSize, pointerType);
      }
    }
    prototype.bind = function(){
      var gl;
      gl = this.graphics.gl;
      gl.bindBuffer(this.type, this.handle);
    };
    prototype.unbind = function(){
      var gl;
      gl = this.graphics.gl;
      gl.bindBuffer(this.type, null);
    };
    prototype.data = function(data, hint, pointerSize, pointerType){
      var gl, size, ref$, res$, i$, x$, len$;
      this.pointerSize = pointerSize;
      this.pointerType = pointerType;
      gl = this.graphics.gl;
      hint == null && (hint = gl.STATIC_DRAW);
      if (data.prototype === Int8Array.prototype) {
        this.pointerType = (function(){
          switch (toString$.call(data).slice(8, -1)) {
          case 'Int8Array':
            return gl.BYTE;
          case 'Uint8Array':
          case 'Uint8ClampedArray':
            return gl.UNSIGNED_BYTE;
          case 'Int16Array':
            return gl.SHORT;
          case 'Uint16Array':
            return gl.UNSIGNED_SHORT;
          case 'Int32Array':
            return gl.INT;
          case 'Uint32Array':
            return gl.UNSIGNED_INT;
          case 'Float32Array':
            return gl.FLOAT;
          case 'Float64Array':
            return gl.DOUBLE;
          default:
            throw new Error("Unspported TypedArray type '" + toString$.call(data).slice(8, -1) + "'");
          }
        }());
      } else if (data instanceof Array) {
        this.pointerType == null && (this.pointerType = this.type === gl.ELEMENT_ARRAY_BUFFER
          ? gl.UNSIGNED_SHORT
          : gl.FLOAT);
        size = 1;
        while (data[0] instanceof Array) {
          size *= data[0].length;
          data = (ref$ = []).concat.apply(ref$, data);
        }
        if (((ref$ = data[0]) != null ? ref$.elements : void 8) != null) {
          size *= data[0].elements.length;
          res$ = [];
          for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
            x$ = data[i$];
            res$.push(x$.flatten());
          }
          data = res$;
        }
        this.pointerSize == null && (this.pointerSize = size);
        data = (function(){
          switch (this.pointerType) {
          case gl.BYTE:
            return new Int8Array(data);
          case gl.UNSIGNED_BYTE:
            return new Uint8Array(data);
          case gl.SHORT:
            return new Int16Array(data);
          case gl.UNSIGNED_SHORT:
            return new Uint16Array(data);
          case gl.INT:
            return new Int32Array(data);
          case gl.UNSIGNED_INT:
            return new Uint32Array(data);
          case gl.FLOAT:
            return new Float32Array(data);
          case gl.DOUBLE:
            return new Float64Array(data);
          default:
            throw new Error("Unsupported pointer type");
          }
        }.call(this));
      } else {
        throw new Error("Expected data to be TypedArray or Array, got '" + toString$.call(data).slice(8, -1) + "'");
      }
      this.bind();
      gl.bufferData(this.type, data, hint);
    };
    return Buffer;
  }());
}).call(this);
