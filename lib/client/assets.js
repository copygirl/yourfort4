// Generated by LiveScript 1.4.0
(function(){
  var ref$, Shader, Texture, resourceHandlers, loadFile, assets, loadAssets, Assets;
  ref$ = require('./graphics'), Shader = ref$.Shader, Texture = ref$.Texture;
  resourceHandlers = {
    sprites: function(game, name, folder, callback){
      var image;
      image = new Image();
      image.name = name;
      image.addEventListener('error', function(){
        callback(new Error("Error loading sprite '" + name + "'"));
      });
      image.addEventListener('load', function(){
        image.texture = new Texture(game.graphics, image);
        callback(null, image);
      });
      image.src = folder + "/" + name + ".png";
    },
    shaders: function(game, name, folder, callback){
      loadFile(folder + "/" + name, function(err, src){
        var shader;
        if (err == null) {
          try {
            shader = new Shader(game.graphics, name, src);
          } catch (e$) {
            err = e$;
          }
        }
        callback(err, shader);
      });
    }
  };
  loadFile = function(url, callback){
    var request;
    request = new XMLHttpRequest();
    request.open('GET', url);
    request.overrideMimeType("text/plain");
    request.addEventListener('loadend', function(){
      if (request.responseText != null) {
        callback(null, request.responseText);
      } else {
        callback(new Error("Error loading '" + url + "'"));
      }
    });
    request.send();
  };
  assets = null;
  loadAssets = function(callback){
    if (assets != null) {
      return callback(null, assets);
    }
    loadFile("assets/assets.json", function(err, json){
      callback(err, err == null ? JSON.parse(json) : void 8);
    });
  };
  module.exports = Assets = (function(){
    Assets.displayName = 'Assets';
    var prototype = Assets.prototype, constructor = Assets;
    function Assets(game){
      this.game = game;
    }
    prototype.load = function(group, callback, progress){
      var this$ = this;
      loadAssets(function(err, assets){
        var numAssets, numAssetsCompleted, i$, ref$;
        assets = assets[group];
        numAssets = 0;
        numAssetsCompleted = 0;
        for (i$ in ref$ = resourceHandlers) {
          (fn$.call(this$, i$, ref$[i$]));
        }
        if (numAssets <= 0) {
          callback();
        }
        function fn$(type, handler){
          var folder, assetsGroup, i$, ref$, ref1$, len$;
          folder = "assets/" + type;
          assetsGroup = this[type] = {};
          for (i$ = 0, len$ = (ref$ = (ref1$ = assets[type]) != null
            ? ref1$
            : []).length; i$ < len$; ++i$) {
            (fn$.call(this, ref$[i$]));
          }
          function fn$(name){
            numAssets++;
            handler(game, name, folder, function(err, asset){
              if (err != null) {
                console.error(err);
              } else {
                assetsGroup[name] = asset;
              }
              numAssetsCompleted++;
              if (progress != null) {
                progress(asset, numAssetsCompleted, numAssets);
              }
              if (numAssetsCompleted >= numAssets) {
                callback();
              }
            });
          }
        }
      });
    };
    return Assets;
  }());
}).call(this);
