// Generated by LiveScript 1.4.0
(function(){
  var Entity, Block, Input, Graphics, Assets, Game, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
  Entity = require('../common/entity');
  Block = require('../common/block');
  Input = require('./input');
  Graphics = require('./graphics');
  Assets = require('./assets');
  window.requestAnimationFrame == null && (window.requestAnimationFrame = partialize$.apply(this, [setTimeout, [void 8, 33], [0]]));
  out$.Game = Game = (function(){
    Game.displayName = 'Game';
    var prototype = Game.prototype, constructor = Game;
    function Game(canvas, size, scale){
      this.canvas = canvas;
      this.input = new Input(this);
      this.assets = new Assets(this);
      this.graphics = new Graphics(this, this.canvas, size, scale);
      this.nextEntityId = 1;
      this.entities = {};
      this.entitiesRenderable = {};
      this.entitiesCollidable = {};
    }
    prototype.run = function(fps){
      var this$ = this;
      this.assets.load("loading-screen", function(){
        this$.graphics.init();
        this$.update();
        this$.assets.load("game", function(){});
      });
    };
    prototype.update = function(){
      this.graphics.render();
      requestAnimationFrame(bind$(this, 'update'));
    };
    return Game;
  }());
  window.addEventListener("load", function(){
    var canvas, game, i$, x, ref$, to$, y;
    canvas = document.getElementById('game');
    game = window.game = new Game(canvas);
    for (i$ = 16; i$ < 240; i$ += 16) {
      x = i$;
      ref$ = new Block(game);
      ref$.pos = [x, 16];
      ref$.color = [1, 0, 0, 1];
      ref$ = new Block(game);
      ref$.pos = [x, 160 - 16];
      ref$.color = [0, 1, 0, 1];
    }
    for (i$ = 32, to$ = 160 - 16; i$ < to$; i$ += 16) {
      y = i$;
      ref$ = new Block(game);
      ref$.pos = [16, y];
      ref$.color = [0, 0, 1, 1];
      ref$ = new Block(game);
      ref$.pos = [240 - 16, y];
      ref$.color = [1, 1, 0, 1];
    }
    return game.run(30);
  });
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
